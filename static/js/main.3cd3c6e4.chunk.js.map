{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getNetwork","connectionInfo","navigator","connection","setState","powerOn","speed","downlink","onchange","e","state","target","_this2","react_default","a","createElement","style","background","height","display","flexDirection","justifyContent","alignItems","Typography","marginBottom","variant","Fab","width","border","boxShadow","color","size","onClick","PauseOutlined_default","PlayArrowOutlined_default","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.3cd3c6e4.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport 'typeface-roboto';\nimport Fab from '@material-ui/core/Fab';\nimport Typography from '@material-ui/core/Typography';\nimport PlayArrowOutlinedIcon from '@material-ui/icons/PlayArrowOutlined';\nimport PauseOutlinedIcon from '@material-ui/icons/PauseOutlined';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {powerOn: false, speed: 0}\n  }\n\n  componentWillUnmount(){\n    this.setState({\n      powerOn:false\n    })\n  }\n\n  getNetwork = () => {\n    const connectionInfo = navigator.connection\n\n    this.setState({\n      powerOn: true,\n      speed: connectionInfo.downlink\n    })\n\n    const changeFunc = (e) => this.state.powerOn && this.setState({speed: e.target.downlink})\n\n    navigator.connection.onchange = changeFunc;\n  }\n\n  render() {\n    return (\n      <div style={{\n        background: 'linear-gradient(to right bottom, #ffefba, #ffffff)'\n      }}>\n        <div \n          style={{height: '100vh',display:'flex',flexDirection:'column', justifyContent:'center', alignItems:'center'}}\n        >\n          <Typography style={{marginBottom: 50}} variant=\"h1\">{this.state.speed}Mbps</Typography>\n          {!this.state.powerOn ?\n          <Fab style={{\n            width: 120,\n            background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n            border: 0,\n            boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\n            color: 'white'\n          }} variant=\"extended\" size=\"large\" onClick={this.getNetwork}><PlayArrowOutlinedIcon/>Start</Fab>:\n          <Fab style={{\n            width: 120,\n            background: 'linear-gradient(45deg, #2196F3 30%, #21CBF3 90%)',\n            border: 0,\n            boxShadow: '0 3px 5px 2px rgba(33, 203, 243, .3)',\n            color: 'white',\n          }} color='secondary' size=\"large\" variant=\"extended\" onClick={()=>this.setState({powerOn:false, speed:0})}><PauseOutlinedIcon/>Stop</Fab>\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\nserviceWorker.register();\n"],"sourceRoot":""}